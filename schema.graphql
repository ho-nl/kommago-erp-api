# This schema does not include all the fields present in the ERP, only those that we need for webshop functionality
#
# Following https://www.apollographql.com/docs/technotes/TN0002-schema-naming-conventions/ for naming conventions

type Query {
  "Fetches ERP product data for the given SKUs. If an unrecognized SKU is given, data should still be returned for the other SKUs, instead of triggering an error"
  products(skus: [String!]!): ProductsOutput!

  "Returns information of the currently authenticated customer. Field can be null if currently authenticated user's email is not known in ERP."
  customer: Customer
}

type Mutation {
  "Updates the currently authenticated customer"
  updateCustomer(input: CustomerInput!): UpdateCustomerOutput!

  "Create a new CustomerAddress for the currently authorized customer"
  createCustomerAddress(
    input: CustomerAddressInput!
  ): CreateCustomerAddressOutput!

  "Update the referenced CustomerAddress"
  updateCustomerAddress(
    id: Int!
    input: CustomerAddressInput!
  ): UpdateCustomerAddressOutput!

  "Delete the referenced CustomerAddress"
  deleteCustomerAddress(id: Int!): Boolean
}

"ERP Product entity"
type Product {
  "Entity ID"
  id: Int!

  # TODO: Document sku field
  sku: String!

  "The product price, excluding any VAT, but including the effective discount for the currently authenticated customer"
  price: Price!

  "Optionally, the applicable price tiers for this product (and currently authenticated customer)"
  priceTiers: [PriceTier!]
}

type ProductsOutput {
  """
  A list where the skus are matching the input skus array. If a SKU can not be found, it will return null in that place

      query {
        products(skus: ['a','b','c'])
      }

  The above query can return something like this if a SKU does not exist:

      [Product, null, Product]
  """
  products: [Product]
}

type PriceTier {
  "TODO: Document exact semantics of quantity"
  quantity: Int!

  price: Price!
}

enum PriceCurrency {
  EUR
}

type Price {
  "Currency will currently always be EUR"
  currency: PriceCurrency

  "The price value"
  value: Float!
}

"ERP Customer entity"
type Customer {
  "Internal Number (user-visible)"
  internalNumber: Int!

  "Customer type"
  type: CustomerType!

  "Email (Magento: customer.email)"
  email: String!

  "Company name, if applicable"
  companyName: String

  "Title or prefix (Magento: customer.prefix)"
  title: String

  "First name (Magento: customer.firstname)"
  firstName: String

  "Last name prefix (Magento: customer.middlename)"
  lastNamePrefix: String

  "Last name (Magento: customer.lastname)"
  lastName: String

  "VAT number (Magento: customer.taxvat)"
  vatNumber: String

  "KVK number"
  kvkNumber: String

  "List of customer addresses (contacts)"
  addresses: [CustomerAddress]

  "The default invoice address (should also be present in the `addresses` field)"
  defaultInvoiceAddress: CustomerAddress

  "The default delivery address (should also be present in the `addresses` field)"
  defaultDeliveryAddress: CustomerAddress

  "Lit of the customer orders"
  orders(pageSize: Int = 20, currentPage: Int = 1): OrderList
}

enum CustomerType {
  COMPANY
  PRIVATE
}

"ERP Customer address (contact) entity"
type CustomerAddress {
  "Entity ID"
  id: Int!

  "Address type (invoice/delivery)"
  type: CustomerAddressType!

  "Company (Magento: address.company)"
  company: String

  "Title (Magento: address.prefix)"
  title: String

  "First name (Magento: address.firstname)"
  firstName: String

  "Last name prefix (Magento: address.middlename)"
  lastNamePrefix: String

  "Last name (Magento: address.lastname)"
  lastName: String

  "Phone no. (Magento: address.telephone"
  phone: String

  "Street (Magento: address.street[0])"
  street: String

  "Street no. (Magento: address.street[1])"
  streetNo: String

  "Street no. suffix (Magento: address.street[2])"
  streetNoSuffix: String

  "Postal code (Magento: address.postcode)"
  postalCode: String

  "City (Magento: address.city)"
  city: String

  "Country ISO 3166-1 alpha-2 code (Magento: address.country_id)"
  country: String

  "VAT number (Magento: address.vat_id)"
  vatNumber: String
}

type Package {
  "The invoice number for this package"
  invoiceNumber: Int

  "The Track and Trace number for this package"
  trackAndTraceNumber: String
}

enum CustomerAddressType {
  INVOICE
  DELIVERY
}

enum OrderStatus {
  CREATED
  PROFORMA_INVOICE
  READY_TO_BE_SENT_TO_SUPPLIER
  SENT_TO_THE_SUPPLIER
  PARTIALLY_RECEIVED
  READY_FOR_PARTIAL_DELIVERY
  RECEIVED
  READY_FOR_DELIVERY
  SENT_TO_CUSTOMER
}

enum ShipmentType {
  SHIPMENT_TO_CUSTOMER_ADDRESS
  PICKUP_FROM_POSTNL_LOCATION
  PICKUP_ORDER
}

enum PaymentMethodType {
  CASH_ON_DELIVERY
  ON_ACCOUNT
  IN_ADVANCE_BY_BANK
  CONTANT
  CREDIT
  IDEAL
  CREDIT_CARD
  CREDIT_APPROVAL
  SOFORT
  KLARNA
}

type OrderItem {
  "Order item id (sku in Magento)"
  id: ID!

  "Internal number (User-visible)"
  internalNumber: String!

  "Name of the product"
  name: String!

  "Price at which the product was sold"
  sellingPrice: Float!

  "Quantity of the product that was ordered"
  orderedQuantity: Int!

  "Quantity of the product that have been sent"
  sentQuantity: Int!
}

type OrderAddress {
  "Company (Magento: address.company)"
  company: String

  "Title (Magento: address.prefix)"
  title: String

  "First name (Magento: address.firstname)"
  firstName: String

  "Last name prefix (Magento: address.middlename)"
  lastNamePrefix: String

  "Last name (Magento: address.lastname)"
  lastName: String

  "Phone no. (Magento: address.telephone"
  phone: String

  "Street (Magento: address.street[0])"
  street: String

  "Street no. (Magento: address.street[1])"
  streetNo: String

  "Street no. suffix (Magento: address.street[2])"
  streetNoSuffix: String

  "Postal code (Magento: address.postcode)"
  postalCode: String

  "City (Magento: address.city)"
  city: String

  "Country ISO 3166-1 alpha-2 code (Magento: address.country_id)"
  country: String

  "VAT number (Magento: address.vat_id)"
  vatNumber: String
}

type Order {
  "Internal Number (user-visible)"
  internalNumber: Int!

  "Current state of the order"
  state: OrderStatus!

  "Date and time at which the order was placed (format 2022-12-23 15:56)"
  orderDate: String!

  "The type of shipment for the order"
  shipmentType: ShipmentType

  "The delivery address for the order"
  deliveryAddress: OrderAddress!

  "The invoice address for the order"
  invoiceAddress: OrderAddress!

  "Total value for the order"
  grandTotal: Float!

  "Total vat tax value for the order"
  vatValue: Float!

  "List of the order items"
  items: [OrderItem]!

  "List of packages"
  packages: [Package]
}

type PageInfo {
  currentPage: Int
  pageSize: Int
  totalPages: Int
  totalCount: Int
}

type OrderList {
  items: [Order]
  pageInfo: PageInfo
}

"ERP Customer input"
input CustomerInput {
  "Company name, if applicable"
  companyName: String

  "Title or prefix (Magento: customer.prefix)"
  title: String

  "First name (Magento: customer.firstname)"
  firstName: String

  "Last name prefix (Magento: customer.middlename)"
  lastNamePrefix: String

  "Last name (Magento: customer.lastname)"
  lastName: String

  "VAT number (Magento: customer.taxvat)"
  vatNumber: String

  "The default invoice address (should also be present in the `addresses` field)"
  defaultInvoiceAddressId: Int

  "The default delivery address (should also be present in the `addresses` field)"
  defaultDeliveryAddressId: Int
}

type UpdateCustomerOutput {
  customer: Customer
}

"ERP Customer address input"
input CustomerAddressInput {
  "Address type (invoice/delivery)"
  type: CustomerAddressType!

  "Company (Magento: address.company)"
  company: String

  "Title (Magento: address.prefix)"
  title: String

  "First name (Magento: address.firstname)"
  firstName: String

  "Last name prefix (Magento: address.middlename)"
  lastNamePrefix: String

  "Last name (Magento: address.lastname)"
  lastName: String

  "Phone no. (Magento: address.telephone"
  phone: String

  "Street (Magento: address.street[0])"
  street: String!

  "Street no. (Magento: address.street[1])"
  streetNo: String

  "Street no. suffix (Magento: address.street[2])"
  streetNoSuffix: String

  "Postal code (Magento: address.postcode)"
  postalCode: String

  "City (Magento: address.city)"
  city: String!

  "Country ISO 3166-1 alpha-2 code (Magento: address.country_id)"
  country: String!

  "VAT number (Magento: address.vat_id)"
  vatNumber: String
}

type CreateCustomerAddressOutput {
  address: CustomerAddress
}

type UpdateCustomerAddressOutput {
  address: CustomerAddress
}
